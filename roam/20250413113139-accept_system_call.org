:PROPERTIES:
:ID:       9f8b7dc2-79fc-4cdf-ae2f-33c8fd948a95
:END:
#+title: accept system call
#+date: [2025-04-13 So 11:31]
#+startup: overview

#+begin_src c
#include <sys/types.h>
#include <sys/socket.h>
int accept(int sockfd, struct sockaddr *addr, socklen_t *addrlen);
#+end_src

* accept
** examples
*** from beej
#+begin_src c
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netdb.h>
#define MYPORT "3490"
#define BACKLOG 10
// the port users will be connecting to
// how many pending connections queue will hold
int main(void) {
	struct sockaddr_storage their_addr;
	socklen_t addr_size;
	struct addrinfo hints, *res;
	int sockfd, new_fd;
// !! don't forget your error checking for these calls !!
// first, load up address structs with getaddrinfo():
	memset(&hints, 0, sizeof hints);
	hints.ai_family = AF_UNSPEC; // use IPv4 or IPv6, whichever
	hints.ai_socktype = SOCK_STREAM;
	hints.ai_flags = AI_PASSIVE;
// fill in my IP for me
	getaddrinfo(NULL, MYPORT, &hints, &res);
// make a socket, bind it, and listen on it:
	sockfd = socket(res->ai_family, res->ai_socktype, res->ai_protocol);
	bind(sockfd, res->ai_addr, res->ai_addrlen);
	listen(sockfd, BACKLOG);
// now accept an incoming connection:
	addr_size = sizeof their_addr;
	new_fd = accept(sockfd, (struct sockaddr *)&their_addr, &addr_size);
					/* ... */
					}
#+end_src
