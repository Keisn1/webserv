:PROPERTIES:
:ID:       a6df6013-b9e1-434f-af10-0dafda983bc9
:END:
#+title: socket programming
#+date: [2025-04-09 Wed 07:56]
#+startup: overview

* what is a socket
- a socket is a concept generally referred two if two parties want to exchange data in two directions
- it is an standardized abstraction/network interface provided by the OS to give you network communication capabilities
- they behave/look much like file-descriptors but they have a two-ways behavior
  - the number returned is representing a network endpoint
- besides sockets which allow parties to communicate over a computer network, there are also sockets which facilitate the communication between processes inside the same computer ([[https://en.wikipedia.org/wiki/Unix_domain_socket][UDS - UNIX domain sockets]])
- for network communication, we usually speak about Berkeley sockets
  - man 2 socket =<sys/socket.h>= =socket()=
  - this library function is part of POSIX and came out of =BSD= (Berkeley Software Distribution - Berkeley Socket)
    #+begin_example
HISTORY
       POSIX.1-2001, 4.4BSD.
       socket() appeared in 4.2BSD.  It is generally portable to/from non-BSD systems supporting clones of the BSD socket layer (including System V variants).
       ...
    #+end_example

* SOCK_STREAM sockets
- they are full-duplex byte streams
  - it means that receiving and sending data can happen at the same time without interfering with each other
- in the POSIX API, one can send data via read/write or variant of send/recv
- they queue up connections until BACKLOG limit is hit
  (=int listen(int sockfd, int backlog)=)

* [[id:73718bca-3b14-4888-addf-984719c83c2f][Asynchronous I/O communication]]

* API

** socket library function
#+begin_src c
int socket(int domain, int type, int protocol);
#+end_src
*** domain
- address family
- is the protocol family that is used for the communication
- describes which category of address the socket can communicat with
  - therefore it is belonging to a bounded space, hence domain
- AF ... refers to address family
#+begin_example
AF_INET      IPv4 Internet protocols                    ip(7)
AF_UNIX      Local communication                        unix(7)
AF_INET6     IPv6 Internet protocols                    ipv6(7)
#+end_example
*** type
- refers to the network layer protocol being used for the communication
- it specifies the language that the socket is speaking (communication semantics)
#+begin_example
SOCK_STREAM     Provides sequenced, reliable, two-way, connection-based
                byte  streams.  An out-of-band data transmission mecha‚Äê
                nism may be supported.

SOCK_DGRAM      Supports datagrams (connectionless, unreliable messages
                of a fixed maximum length).
#+end_example

** addrinfo
#+begin_src c
struct addrinfo {
        int ai_flags; // AI_PASSIVE, AI_CANONNAME, etc.
        int ai_family; // AF_INET, AF_INET6, AF_UNSPEC
        int ai_socktype; // SOCK_STREAM, SOCK_DGRAM
        int ai_protocol; // use 0 for "any"
        size_t ai_addrlen; // size of ai_addr in bytes
        struct sockaddr *ai_addr; // struct sockaddr_in or _in6
        char *ai_canonname; // full canonical hostname
        struct addrinfo *ai_next; // linked list, next node
};
#+end_src
