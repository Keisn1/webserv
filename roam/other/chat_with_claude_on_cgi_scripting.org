:PROPERTIES:
:GPTEL_MODEL: claude-3-7-sonnet-20250219
:GPTEL_BACKEND: Claude
:GPTEL_SYSTEM: You are a large language model living in Emacs and a helpful assistant. Avoid long answers.
:GPTEL_BOUNDS: ((response (382 942) (997 1694) (1796 2555) (2594 3399) (3438 4287) (4364 5538) (5653 6566) (6700 10788)))
:END:

*** which module in python should i use for building a cgi script?

For building a CGI script in Python, use the =cgi= module from the standard library. It provides functions for parsing form data and handling CGI requests.

Basic usage example:

#+begin_src python
#!/usr/bin/env python
import cgi

print("Content-Type: text/html\n\n")  # HTTP header required for CGI
form = cgi.FieldStorage()  # Parse form data

# Access form fields
name = form.getvalue('name', 'unknown')
print(f"<html><body>Hello, {name}!</body></html>")
#+end_src

For more modern web development, consider frameworks like Flask or FastCGI instead of CGI.

*** in 3.12 it is no longer in the standard library

You're right, the =cgi= module was deprecated in Python 3.8 and removed in Python 3.12. For modern CGI scripting in Python 3.12, you have these alternatives:

1. Use the =http.server= module with CGIHTTPRequestHandler:
   #+begin_src python
   from http.server import CGIHTTPRequestHandler, HTTPServer
   #+end_src

2. Better approach: Use WSGI frameworks like:
   - Flask (lightweight): =pip install flask=
   - FastCGI via flup: =pip install flup=
   - Django (full-featured): =pip install django=

3. For simple form parsing, use =urllib.parse=:
   #+begin_src python
   import urllib.parse
   #+end_src

Most modern environments prefer WSGI or ASGI over traditional CGI for better performance.

*** give me the most simple script, which takes in a query parameter and prints it out as a string

Here's a simple CGI script for Python 3.12 that takes a query parameter and prints it out:

#+begin_src python
#!/usr/bin/env python3

import os
import urllib.parse

# HTTP header required for CGI
print("Content-Type: text/html\n")

# Get and parse query string
query_string = os.environ.get("QUERY_STRING", "")
params = urllib.parse.parse_qs(query_string)

# Get parameter 'q' (or empty string if not provided)
query = params.get('q', [''])[0]

# Output HTML
print(f"""
<html>
<body>
    <h1>Query Parameter</h1>
    <p>You entered: {query}</p>
</body>
</html>
""")
#+end_src

Save this as a =.py= file, make it executable (=chmod +x script.py=), and place it in your web server's CGI directory. Access it with: =http://yourserver/cgi-bin/script.py?q=hello=.

*** i'm missing the carriage return

You're right - CGI requires the HTTP header to be separated from the body by a blank line, which means both a carriage return and line feed. Here's the corrected script:

#+begin_src python
#!/usr/bin/env python3

import os
import urllib.parse

# HTTP header with proper CRLF
print("Content-Type: text/html")
print()  # This prints a blank line with both CR and LF

# Get and parse query string
query_string = os.environ.get("QUERY_STRING", "")
params = urllib.parse.parse_qs(query_string)

# Get parameter 'q' (or empty string if not provided)
query = params.get('q', [''])[0]

# Output HTML
print(f"""
<html>
<body>
    <h1>Query Parameter</h1>
    <p>You entered: {query}</p>
</body>
</html>
""")
#+end_src

The =print()= with empty parentheses ensures the proper header separation with both CR and LF.

*** how do i print without newline?

To print without a newline in Python, you can use the =end= parameter of the =print()= function. Here's how to modify your CGI script:

#+begin_src python
#!/usr/bin/env python3

import os
import urllib.parse

# HTTP header with proper CRLF
print("Content-Type: text/html", end="\r\n")
print(end="\r\n")  # Blank line with CRLF only

# Get and parse query string
query_string = os.environ.get("QUERY_STRING", "")
params = urllib.parse.parse_qs(query_string)

# Get parameter 'q' (or empty string if not provided)
query = params.get('q', [''])[0]

# Output HTML
print("<html>")
print("<body>")
print("    <h1>Query Parameter</h1>")
print(f"    <p>You entered: {query}</p>")
print("</body>")
print("</html>")
#+end_src

The =end="\r\n"= parameter replaces the default newline with a carriage return + line feed combination, which is the HTTP standard.

*** now i want a python script which prints out multiple query parameters

Here's a Python CGI script that prints out multiple query parameters:

#+begin_src python
#!/usr/bin/env python3

import os
import urllib.parse

# HTTP header with proper CRLF
print("Content-Type: text/html", end="\r\n")
print(end="\r\n")  # Blank line with CRLF

# Get and parse query string
query_string = os.environ.get("QUERY_STRING", "")
params = urllib.parse.parse_qs(query_string)

print("<html>")
print("<body>")
print("    <h1>Query Parameters</h1>")
print("    <table border='1'>")
print("        <tr><th>Parameter</th><th>Value(s)</th></tr>")

# Display all parameters
if params:
    for param_name, param_values in params.items():
        values_str = ", ".join(param_values)
        print(f"        <tr><td>{param_name}</td><td>{values_str}</td></tr>")
else:
    print("        <tr><td colspan='2'>No parameters found</td></tr>")

print("    </table>")
print("</body>")
print("</html>")
#+end_src

Access with multiple parameters like:
#+begin_src
http://yourserver/cgi-bin/script.py?name=John&age=30&hobby=coding&hobby=reading
#+end_src

This will display all parameters and their values in a table format, handling cases where a parameter has multiple values.

*** should a cgi always send the output of the script immediately to the client or only after end of execution?

CGI scripts send output immediately to the client as it's being generated. This is called "streaming" behavior and happens because:

1. The standard output (stdout) of the CGI script is directly connected to the client connection
2. Each =print()= statement flushes output to the client as soon as it's executed

This immediate output can be useful for:
- Long-running scripts to show progress
- Server-sent events
- Large responses where you want the client to start rendering immediately

However, this can cause issues if errors occur mid-script after headers are sent. For more control, you can:

1. Buffer output manually by storing content in a variable and printing at the end
2. Use a framework like WSGI which buffers by default
3. Use =sys.stdout = io.StringIO()= for full buffering

Most production environments today use WSGI/ASGI rather than CGI specifically because they offer better output control.

*** I'm building a server in cpp with a cgi. How could i write a unit test for this kind of behavior (sending output immediately)


To unit test immediate output behavior of a CGI script in a C++ server, you'll need to simulate the CGI environment and capture stream output as it happens. Here's an approach:

#+begin_src cpp
#include <gtest/gtest.h>
#include <thread>
#include <chrono>
#include <vector>
#include <string>
#include <atomic>
#include <cstdio>
#include <future>

class CGIStreamTest : public ::testing::Test {
protected:
    // Mock pipe for capturing CGI output
    FILE* mock_cgi_pipe_read;
    FILE* mock_cgi_pipe_write;

    void SetUp() override {
        // Create pipe for communication
        int pipefd[2];
        pipe(pipefd);

        mock_cgi_pipe_read = fdopen(pipefd[0], "r");
        mock_cgi_pipe_write = fdopen(pipefd[1], "w");
    }

    void TearDown() override {
        fclose(mock_cgi_pipe_read);
        fclose(mock_cgi_pipe_write);
    }

    // Simulates running your CGI handler and captures output timing
    std::vector<std::pair<std::string, std::chrono::milliseconds>>
    runCGIAndCaptureTimedOutput() {
        std::vector<std::pair<std::string, std::chrono::milliseconds>> output;
        std::atomic<bool> done{false};

        // Start reader thread to capture output as it arrives
        auto reader = std::async(std::launch::async, [&]() {
            auto start = std::chrono::steady_clock::now();
            char buffer[1024];

            while (!done) {
                if (fgets(buffer, sizeof(buffer), mock_cgi_pipe_read)) {
                    auto now = std::chrono::steady_clock::now();
                    auto elapsed = std::chrono::duration_cast<std::chrono::milliseconds>(now - start);
                    output.push_back({std::string(buffer), elapsed});
                }
                std::this_thread::sleep_for(std::chrono::milliseconds(10));
            }
        });

        // Redirect stdout to our pipe for CGI execution
        int original_stdout = dup(fileno(stdout));
        dup2(fileno(mock_cgi_pipe_write), fileno(stdout));

        // Execute your CGI handler function
        executeCGIHandler(); // Your function that processes CGI requests

        // Restore stdout
        fflush(stdout);
        dup2(original_stdout, fileno(stdout));

        // Signal reader to finish and wait
        done = true;
        reader.wait();

        return output;
    }

    // Your actual CGI handler implementation
    void executeCGIHandler() {
        // Call your server's CGI execution code here
        // This is a simulation with delayed output
        printf("HTTP/1.1 200 OK\r\n");
        printf("Content-Type: text/html\r\n\r\n");
        fflush(stdout); // Force immediate output

        std::this_thread::sleep_for(std::chrono::milliseconds(100));
        printf("<html><body>\n");
        fflush(stdout);

        std::this_thread::sleep_for(std::chrono::milliseconds(100));
        printf("<h1>Hello World</h1>\n");
        fflush(stdout);

        std::this_thread::sleep_for(std::chrono::milliseconds(100));
        printf("</body></html>\n");
        fflush(stdout);
    }
};

TEST_F(CGIStreamTest, VerifyStreamingOutput) {
    auto timedOutput = runCGIAndCaptureTimedOutput();

    // Verify we got expected number of outputs
    ASSERT_GE(timedOutput.size(), 4);

    // Verify timing shows streaming (not all at end)
    EXPECT_LT(timedOutput[0].second.count(), 50);  // Header should be immediate
    EXPECT_GT(timedOutput[2].second.count(), 150); // Later parts should be delayed

    // Verify content
    EXPECT_TRUE(timedOutput[0].first.find("HTTP/1.1 200 OK") != std::string::npos);
    EXPECT_TRUE(timedOutput[2].first.find("<h1>Hello") != std::string::npos);
}
#+end_src

Key testing points:
1. Create a pipe to capture CGI output
2. Record timestamps when each output chunk arrives
3. Verify early chunks arrive before later chunks
4. Ensure time gaps between outputs match expectations

You may need to adjust this to match your specific C++ server architecture and CGI implementation.

***
