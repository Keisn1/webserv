:PROPERTIES:
:ID:       370a29f0-3734-47d5-9d79-e7341bb429b0
:END:
#+title: addrinfo
#+date: [2025-04-12 Sa 19:34]
#+startup: overview

* struct addrinfo
:PROPERTIES:
:ID:       8760fc44-0e47-48d6-b973-36dea969669e
:END:
- used often in conjunction with =getaddrinfo()= which loads the struct up with information
- man getaddrinfo
- ai stands for address info
- all this stuff has the purpose of accurately and entirely describing addresses in a wide range of applications (not only Internet)
- it is a list
  - freeing with =freeaddrinfo(head)=

#+begin_src c
struct addrinfo {
        int ai_flags; // AI_PASSIVE, AI_CANONNAME, etc.
        int ai_family; // AF_INET, AF_INET6, AF_UNSPEC
        int ai_socktype; // SOCK_STREAM, SOCK_DGRAM
        int ai_protocol; // use 0 for "any"
        size_t ai_addrlen; // size of ai_addr in bytes
        struct sockaddr *ai_addr; // struct sockaddr_in or _in6
        char *ai_canonname; // full canonical hostname
        struct addrinfo *ai_next; // linked list, next node
};
#+end_src
- *ai family*
  - either IVv4 (AF_INET) or IPv6 (AF_INET6), or choose with AF_UNSPEC

* struct sockaddr
#+begin_src cpp
struct sockaddr {
        unsigned short sa_family; // address family, AF_xxx
        char sa_data[14]; // 14 bytes of protocol address
};
#+end_src

- *sa_family*
  - again can be alot of things (AF_INET or AF_INET6 usually)
  - other may be
    - =AF_UNIX= (or =AF_LOCAL=): Local communication within the same host, also known as Unix domain sockets.
    - =AF_APPLETALK=: AppleTalk protocols.
    - =AF_PACKET=: Low-level packet interface, available on Linux for direct access to network interfaces.
    - =AF_NETLINK=: Used for communication between user-space processes and kernel services in Linux.
    - =AF_X25=: X.25 protocol for network communications.
    - =AF_DECnet=: DECnet protocol suite.
    - =AF_BLUETOOTH=: Bluetooth protocol stack.
    - =AF_CAN=: Controller Area Network, used for automotive networks.
    - =AF_RDS=: Reliable Datagram Sockets, used for high-performance cluster applications.

- *sa_data*
  - ip address
  - port number for the socket
  - depending on the context, this is either the remote or the local

* struct sockaddr_in
- can be cast into sockadd
- easier to handle
- sin_zero is for padding
  - should be set to 0 with memset
- sin_family corresponds to sa_family in =struct sockaddr=
  - should be set to *AF_INET*
#+begin_src cpp
// (IPv4 only--see struct sockaddr_in6 for IPv6)
struct sockaddr_in {
    short int sin_family; // Address family, AF_INET
    unsigned short int sin_port; // Port number
    struct in_addr sin_addr; // Internet address
    unsigned char sin_zero[8]; // Same size as struct sockaddr
};
#+end_src

** struct in_addr
- it's the 4 byte IPv4 address in Network-Byte Order
#+begin_src c
// (IPv4 only--see struct in6_addr for IPv6)
// Internet address (a structure for historical reasons)
struct in_addr {
        uint32_t s_addr; // that's a 32-bit int (4 bytes)
};
#+end_src

** inet_pton (string (presentation) to binary (network))
- presentation to network
  - converting string addresses into their binary representation
- storing ip_address into a =struct addrinfo_in ina=
  #+begin_src c
struct sockaddr_in sa;                  /* IPv4 */

inet_pton(AF_INET, "10.12.110.57", (&sa.sin_addr));
  #+end_src

** inet_ntop (binary (network) to string (presentation))
  #+begin_src c
struct sockaddr_in sa;                  /* IPv4 */
char ip4[INET_ADDRSTRLEN];

inet_ntop(AF_INET, "10.12.110.57", (&sa.sin_addr));
  #+end_src
